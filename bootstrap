#!/usr/bin/env zsh
# shellcheck shell=bash

################################################################################
# bootstrap
#
# This script is intended to set up a new Mac computer with my homefiles and
# other preferences.
################################################################################

# Thank you, thoughtbot!
bootstrap_echo() {
  local fmt="$1"
  shift
  # shellcheck disable=SC2059
  printf "\\n[INFO] $fmt\\n" "$@"
}

bootstrap_error() {
  local fmt="$1"
  shift
  # shellcheck disable=SC2059
  printf "\\n[ERROR] $fmt\\n" "$@"
  exit 1
}

bootstrap_done() {
  bootstrap_echo "Step $1 \\e[0;32m[✔]\\e[0m"
}

################################################################################
# VARIABLE DECLARATIONS
################################################################################

step='1'
DEFAULT_TIME_ZONE="Europe/Paris"
ACTUAL_COMPUTER_NAME="$(scutil --get ComputerName)"
HOMEBREW_PREFIX="/usr/local"
GATEKEEPER_DISABLE="Yes"
MACOS_DEFAULT_URL="https://raw.githubusercontent.com/deild/mac-bootstrap/master/macos-defaults"
DEFAULT_PASSPHRASE=""
QUIET=false

while getopts ":q" opts; do
  case "${opts}" in
    q)
      QUIET=true
      ;;
    *)
      bootstrap_error "unknown option -${OPTARG}"
      ;;
  esac
done

################################################################################
# Make sure we're on a Mac before continuing
################################################################################
if [ "$(uname)" != "Darwin" ]; then
  bootstrap_error "Oops, it looks like you're using a non-Darwin system. This script
only supports macOS. Exiting..."
fi

################################################################################
# Welcome and setup
################################################################################

printf '\n'
printf '************************************************************************\n'
printf '*******                                                           ******\n'
printf '*******                 Welcome to Mac Bootstrap!                 ******\n'
printf '*******                                                           ******\n'
printf '************************************************************************\n'
printf '\n'

# Authenticate
if ! sudo -nv &> /dev/null; then
  printf 'Before we get started, we need to have sudo access\n'
  printf 'Enter your password (for sudo access):\n'
  sudo /usr/bin/true
  # Keep-alive: update existing `sudo` time stamp until bootstrap has finished
  while true; do
    sudo -n /usr/bin/true
    sleep 60
    kill -0 "$$" || exit
  done 2> /dev/null &
fi

set -e

if ! $QUIET; then
  printf "Let's get some infos about your setup.\\n"
fi

if ! $QUIET; then
  printf "\\nEnter your desired time zone.
  To view available options run 'sudo systemsetup -listtimezones' in other terminal
  Leave blank for default: %s)\\n>_ "  "$DEFAULT_TIME_ZONE"
  read -r TIME_ZONE
fi
export TIME_ZONE=${TIME_ZONE:-$DEFAULT_TIME_ZONE}

if ! $QUIET; then
  printf '\nEnter your desired computer name for your Mac. (Leave blank for default: %s)\n>_ '   "$ACTUAL_COMPUTER_NAME"
  read -r COMPUTER_NAME
fi
export COMPUTER_NAME="${COMPUTER_NAME:-$ACTUAL_COMPUTER_NAME}"

if ! $QUIET; then
  printf '\nEnter url for masOS defaults file. (Leave blank for default: %s)\n>_ '   "$MACOS_DEFAULT_URL"
  read -r MACOS_URL
fi
export MACOS_URL="${MACOS_URL:-$MACOS_DEFAULT_URL}"

if ! $QUIET; then
  printf 'Do you want disable Gatekeeper? (Y/n) \n>_ '
  read -r REPLY
  if [[ $REPLY =~ ^[Nn]$   ]]; then
    GATEKEEPER_DISABLE="No"
  fi
fi

if ! $QUIET; then
  printf '\nEnter a passphrase for generete ssh key. (Leave blank for default: %s)\n>_ '   "$DEFAULT_PASSPHRASE"
  read -r PASSPHRASE
fi
export PASSPHRASE="${PASSPHRASE:-$DEFAULT_PASSPHRASE}"

printf "\\nLooks good. Here's what we've got so far.\\n"
bootstrap_echo "Time zone:            [%s]" "$TIME_ZONE"
bootstrap_echo "Computer name:        [%s]" "$COMPUTER_NAME"
bootstrap_echo "Disable Gatekeeper:   [%s]" "$GATEKEEPER_DISABLE"
bootstrap_echo "macos defaults file:  [%s]" "$MACOS_URL"
bootstrap_echo "Passphrase            [%s]" "$PASSPHRASE"
printf '\n'
if ! $QUIET; then
  printf 'Continue? (y/N) \n>_ '
  read -r REPLY
  if [[ ! $REPLY =~ ^[Yy]$   ]]; then
    bootstrap_echo "Exit on demand"
    exit 0
  fi
fi

set -e

################################################################################
# Set the timezone; see `sudo systemsetup -listtimezones` for other values
################################################################################
bootstrap_echo "Step $step: Set the timezone to $TIME_ZONE"
sudo systemsetup -settimezone "$TIME_ZONE" > /dev/null
bootstrap_done "$((step++))"

################################################################################
# Set computer name (as done via System Preferences → Sharing)
################################################################################
bootstrap_echo "Step $step: Set computer name to $COMPUTER_NAME"
if [ "$COMPUTER_NAME" != "$ACTUAL_COMPUTER_NAME" ]; then
  sudo scutil --set ComputerName "$COMPUTER_NAME"
  sudo scutil --set HostName "$COMPUTER_NAME"
  sudo scutil --set LocalHostName "$COMPUTER_NAME"
  sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$COMPUTER_NAME"
  sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist
fi
bootstrap_done "$((step++))"

################################################################################
# Install Apple's Command Line Tools
################################################################################
bootstrap_echo "Step $step: Ensuring Apple's command line tools are installed"
# Checks if path to command line tools exist
# Credit: https://apple.stackexchange.com/questions/219507/best-way-to-check-in-bash-if-command-line-tools-are-installed
if command -v xcode-select >&- && xpath=$(xcode-select --print-path) \
  && test -d "${xpath}" && test -x "${xpath}"; then
  bootstrap_echo "Apple's command line tools are already installed."
else
  bootstrap_echo "Installing Apple's command line tools"
  xcode-select --install
  while ! command -v xcode-select >&-; do
    sleep   60
  done
fi
bootstrap_done "$((step++))"

################################################################################
# Gatekeeper
################################################################################
bootstrap_echo "Step $step: Disable or enable Gatekeeper control"
if [[ $GATEKEEPER_DISABLE =~ Yes    ]]; then
  sudo spctl --master-disable
else
  sudo spctl --master-enable
fi
bootstrap_done "$((step++))"

################################################################################
# Homebrew
################################################################################
bootstrap_echo "Step $step: Ensuring Homebrew is installed and updated"
if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -vR "$(whoami):admin" $HOMEBREW_PREFIX
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -vR "$(whoami):admin" "$HOMEBREW_PREFIX"
fi
if ! command -v brew > /dev/null; then
  bootstrap_echo "Installing Homebrew"
  zsh -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  export PATH="/usr/local/bin:$PATH"
fi
brew update
bootstrap_done "$((step++))"
################################################################################
bootstrap_echo "Step $step: Disable Homebrew analytics"
if [ "$(brew analytics)" != "Analytics are disabled." ]; then
  brew analytics off
fi
bootstrap_done "$((step++))"


###############################################################################
# Download Rustup and install Rust
if ! command -v rustup; then
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
fi

###############################################################################
# Homebrew formula
###############################################################################
bootstrap_echo "Step $step: Install or upgrade formula dependencies"

brew tap "homebrew/bundle"
brew bundle --file=- << EOF
tap "homebrew/core"
tap "jez/formulae"
brew "asciidoctor"
brew "freetype"
brew "gettext"
brew "libffi"
brew "pcre"
brew "readline"
brew "sqlite"
brew "xz"
#brew "python@3.9"
#brew "ansible"
brew "autoconf"
brew "automake"
brew "bat"
brew "boost"
#brew "circleci"
brew "coreutils"
brew "curl"
brew "exiftool"
brew "gmp"
brew "libunistring"
brew "lame"
brew "xvid"
brew "ffmpeg"
brew "findutils"
brew "mpfr"
brew "gawk"
brew "gd"
brew "git"
brew "git-filter-repo"
brew "git-lfs"
brew "glib-networking"
brew "gnu-sed"
brew "go"
brew "pkg-config"
brew "gts"
brew "libtool"
brew "graphviz"
brew "gtk-doc"
brew "hledger"
brew "htop"
brew "hugo"
brew "libgit2"
brew "libmypaint"
brew "libressl"
#brew "ncdu"
brew "node"
brew "nvm"
brew "openfortivpn"
brew "openssh"
brew "p7zip"
brew "pandoc"
#brew "pandoc-citeproc"
brew "py2cairo"
brew "pygobject3"
brew "ruby-build"
brew "rbenv"
brew "rsync"
brew "ruby"
brew "shellcheck"
brew "shfmt"
brew "shunit2"
brew "telnet"
brew "texinfo"
brew "tmux"
brew "tree"
brew "vifm"
brew "vim"
#brew "wget"
brew "youtube-dl"
brew "jez/formulae/pandoc-sidenote"
EOF
bootstrap_done "$((step++))"

###############################################################################
# Homebrew cask
###############################################################################
bootstrap_echo "Step $step: Install or upgrade cask"

brew bundle --file=- << EOF
tap "homebrew/cask-fonts"
tap "homebrew/cask"
tap "homebrew/cask-versions"
cask "osxfuse"
cask "1password"
cask "alt-tab"
cask "appcleaner"
cask "basictex"
cask "brave-browser"
cask "calibre"
#cask "countdown"
#cask "epoch-flip-clock"
cask "font-sauce-code-pro-nerd-font"
cask "fork"
#cask "grid-clock"
cask "imageoptim"
cask "kitty"
cask "onyx"
cask "remember-the-milk"
cask "slack"
cask "teamviewer"
cask "the-unarchiver"
cask "tor-browser"
cask "vagrant"
cask "veracrypt"
#cask "virtualbox"
cask "visual-studio-code"
cask "vlc"
#cask "xquartz"
cask "zoom"
brew "encfs"
brew "ntfs-3g"
EOF
brew cleanup -s --prune 1

if ! command -v virtualbox; then
  if ! brew cask install virtualbox; then
    printf 'Continue? (y/N) \n>_ '
    read -r REPLY
    if [[ ! $REPLY =~ ^[Yy]$   ]]; then
      bootstrap_echo "Exit on demand"
      exit 0
    fi
  fi
fi
bootstrap_done "$((step++))"

################################################################################
# zsh plugin
################################################################################
bootstrap_echo "Step $step: Install or upgrade zsh plugin"
if ! [ -f ~/.config/powerlevel10k/powerlevel10k.zsh-theme ]; then
  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.config/powerlevel10k
  echo 'source ~/.config/powerlevel10k/powerlevel10k.zsh-theme' ~/.zshrc >> !
fi
brew bundle --file=- << EOF
brew "zsh-autosuggestions"
brew "zsh-syntax-highlighting"
EOF
bootstrap_done "$((step++))"
################################################################################
# Install dotfiles
################################################################################
bootstrap_echo "Step $step: Install or upgrade and then reload dotfiles"
if [ ! -d "$HOME/.cfg/" ]; then
  curl -fsSOk https://bitbucket.org/!api/2.0/snippets/deild/Gr7nX9/c752be0b868270dbda0959e845eabfa59995c5ce/files/home-cfg.sh | bash
else
  git --git-dir="$HOME/.cfg/" --work-tree="$HOME" checkout
fi
bootstrap_done "$((step++))"

################################################################################
# Ruby
################################################################################
bootstrap_echo "Step $step: Check which Ruby and Gem installs we are using at this point"
bootstrap_echo 'Ruby:    [%s]\n'  "$(command -v ruby);$(ruby -v)"
bootstrap_echo 'Gem:     [%s]\n'  "$(command -v gem);$(gem -v)"
gem update --system --quiet
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))
bootstrap_done "$((step++))"

###############################################################################
bootstrap_echo "Step $step: Generate ed25519 and RSA key"

if ! $QUIET; then
  [ ! -f ~/.ssh/id_ed25519 ] && ssh-keygen -t ed25519 -a 100 -q -N "$PASSPHRASE"
  [ ! -f ~/.ssh/id_rsa ] && ssh-keygen -t rsa -b 4096 -o -a 100 -q -N "$PASSPHRASE"
else
  [ ! -f ~/.ssh/id_ed25519 ] && ssh-keygen -t ed25519 -a 100 -q -N "$PASSPHRASE" -f ~/.ssh/id_ed25519
  [ ! -f ~/.ssh/id_rsa ] && ssh-keygen -t rsa -b 4096 -o -a 100 -q -N "$PASSPHRASE" -f ~/.ssh/id_rsa
fi

bootstrap_done "$((step++))"

###############################################################################
bootstrap_echo "Step $step: Prefer tools installed by Homebrew according to the PATH environment variable"
UB_POS=$(echo "$PATH" | awk '{print index($1, "/usr/bin")}')
ULB_POS=$(echo "$PATH" | awk '{print index($1, "/usr/local/bin")}')
if [ ! "$ULB_POS" -eq "0" ] && [ ! "$ULB_POS" -gt "$UB_POS" ]; then
  PATH="/usr/local/bin:${PATH//:\/usr\/local\/bin:/:}"
  export PATH
fi
bootstrap_done "$((step++))"

################################################################################
# Set macOS preferences
################################################################################
bootstrap_echo "Step $step: Set macOS preferences"

if [[ $MACOS_URL =~ ^http ]]; then
  bootstrap_echo "Load from url $MACOS_DEFAULT_URL"
  curl -fsSL "$MACOS_URL" | zsh
else
  bootstrap_echo "Load from local file $MACOS_URL"
  [ -f "$MACOS_URL" ] && zsh "$MACOS_URL"
fi
bootstrap_done "$((step++))"

################################################################################
# End
################################################################################

printf '\n'
printf '************************************************************************\n'
printf '****                                                              ******\n'
printf '**** Mac Bootstrap complete! Please restart your computer.        ******\n'
printf '****                                                              ******\n'
printf '************************************************************************\n'
printf '\n'
# vim:syntax=sh:filetype=sh
